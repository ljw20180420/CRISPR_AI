import logging
import torch
from diffusers import DiffusionPipeline
from transformers.trainer_utils import PREFIX_CHECKPOINT_DIR
import pathlib


@torch.no_grad()
def upload(
    preprocess: str,
    model: str,
    data_name: str,
    owner: str,
    logger: logging.Logger,
):
    logger.info("load pipeline")
    pipe = DiffusionPipeline.from_pretrained(
        f"preprocess/{preprocess}/pipeline/{model}/{data_name}",
        custom_pipeline=f"preprocess/{preprocess}/pipeline/{model}/{data_name}",
    )

    logger.info("push pipeline to hub")
    pipe.push_to_hub(f"{owner}/{preprocess}_{model}_{data_name}")
    from huggingface_hub import HfApi

    api = HfApi()
    while True:
        try:
            # overwrite the wrong model_index.json in the remote repo generated by pipe.push_to_hub
            for file in ["pipeline.py", "load_data.py", "model_index.json"]:
                api.upload_file(
                    repo_id=f"{owner}/{preprocess}_{model}_{data_name}",
                    path_or_fileobj=f"preprocess/{preprocess}/pipeline/{model}/{data_name}/{file}",
                    path_in_repo=file,
                )
            for component in pipe.components.keys():
                folder_path = (
                    f"preprocess/{preprocess}/pipeline/{model}/{data_name}/{component}"
                )
                for file in pathlib.Path(folder_path).rglob("*"):
                    if not file.is_file():
                        continue
                    api.upload_file(
                        repo_id=f"{owner}/{preprocess}_{model}_{data_name}",
                        path_or_fileobj=file,
                        path_in_repo=f"{component}/{file.name}",
                    )

            break
        except Exception as err:
            print(err)
            print("retry")
